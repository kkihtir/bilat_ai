"use client"
import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { ArrowRight, ArrowLeft } from "lucide-react"
import ReportProgressIndicator from "@/components/reports/report-progress-indicator"
import { mockCountries } from "@/lib/mock-data"

export default function NewsEventsClientPage() {
  const router = useRouter()
  const [selectedCountry, setSelectedCountry] = useState("")
  const [newsEvents, setNewsEvents] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)

  // Load existing data if available
  useEffect(() => {
    const reportData = localStorage.getItem("reportData")
    if (reportData) {
      const parsedData = JSON.parse(reportData)
      setSelectedCountry(parsedData.selectedCountry || "")
      setNewsEvents(parsedData.newsEvents || "")
    }
  }, [])

  const generateWithAI = () => {
    setIsGenerating(true)

    // Simulate AI generation with a timeout
    setTimeout(() => {
      setNewsEvents(
        "• Major policy announcement affecting international trade\n" +
          "• New diplomatic initiative launched\n" +
          "• Economic growth exceeds expectations\n" +
          "• Infrastructure development project announced\n" +
          "• Technology sector sees significant investment\n" +
          "• Environmental protection measures implemented\n" +
          "• Cultural exchange program expanded\n" +
          "• Healthcare system reforms introduced\n" +
          "• Educational partnerships with international institutions\n" +
          "• Tourism industry recovery shows positive signs",
      )
      setIsGenerating(false)
    }, 2000)
  }

  const handleNext = () => {
    // Save current data
    const reportData = JSON.parse(localStorage.getItem("reportData") || "{}")
    const updatedData = {
      ...reportData,
      newsEvents,
      step: "agreements",
    }
    localStorage.setItem("reportData", JSON.stringify(updatedData))

    // Navigate to next step
    router.push("/dashboard/reports/create/agreements")
  }

  const handlePrevious = () => {
    // Save current data
    const reportData = JSON.parse(localStorage.getItem("reportData") || "{}")
    const updatedData = {
      ...reportData,
      newsEvents,
      step: "country-overview",
    }
    localStorage.setItem("reportData", JSON.stringify(updatedData))

    // Navigate to previous step
    router.push("/dashboard/reports/create/country-overview")
  }

  const getCountryName = (code: string) => {
    const country = mockCountries.find((c) => c.code === code)
    return country ? country.name : code
  }

  return (
    <div className="space-y-6">
      <ReportProgressIndicator currentStep="news-events" />

      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">
          News & Events: {selectedCountry ? getCountryName(selectedCountry) : ""}
        </h2>
        <Button onClick={generateWithAI} disabled={isGenerating || !selectedCountry}>
          {isGenerating ? "Generating..." : "Generate with AI"}
        </Button>
      </div>

      {!selectedCountry ? (
        <Card>
          <CardContent className="pt-6 text-center text-gray-500">
            <p>Please select a country first in the Report Info tab.</p>
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardContent className="pt-6 space-y-2">
            <Label htmlFor="news-events">Latest News & Events (10 Important Items)</Label>
            <Textarea
              id="news-events"
              value={newsEvents}
              onChange={(e) => setNewsEvents(e.target.value)}
              placeholder="News and events will be generated by AI"
              rows={10}
            />
          </CardContent>
        </Card>
      )}

      <div className="flex justify-between space-x-4">
        <Button variant="outline" onClick={handlePrevious}>
          <ArrowLeft className="mr-2 h-4 w-4" /> Previous
        </Button>
        <Button onClick={handleNext}>
          Next <ArrowRight className="ml-2 h-4 w-4" />
        </Button>
      </div>
    </div>
  )
}

