"use client"
import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ArrowRight, ArrowLeft, Sparkles } from "lucide-react"
import ReportProgressIndicator from "@/components/reports/report-progress-indicator"
import { mockCountries } from "@/lib/mock-data"

export default function CountryOverviewClientPage() {
  const router = useRouter()
  const [selectedCountry, setSelectedCountry] = useState("")
  const [availableCountries, setAvailableCountries] = useState<string[]>([])
  const [reportType, setReportType] = useState<"meeting" | "informative">("meeting")
  const [countryOverviews, setCountryOverviews] = useState<{[key: string]: {
    economicIndicators: string,
    countryPerception: string,
    tradeSectors: string,
    tradeWithUSA: string,
  }}>({})
  const [isGenerating, setIsGenerating] = useState(false)

  // Load existing data if available
  useEffect(() => {
    const reportData = localStorage.getItem("reportData")
    if (reportData) {
      const parsedData = JSON.parse(reportData)
      setReportType(parsedData.reportType || "meeting")
      
      // Handle country selection differently based on report type
      if (parsedData.reportType === "meeting") {
        setSelectedCountry(parsedData.selectedCountry || "")
        setAvailableCountries([parsedData.selectedCountry])
        // Load country overview if available
        if (parsedData.countryOverview) {
          setCountryOverviews({
            [parsedData.selectedCountry]: parsedData.countryOverview
          })
        }
      } else {
        // For informative reports, handle multiple countries
        const countries = parsedData.selectedCountries || [parsedData.selectedCountry].filter(Boolean)
        setAvailableCountries(countries)
        setSelectedCountry(countries.length > 0 ? countries[0] : "")
        
        // Load country overviews if available
        if (parsedData.countryOverviews) {
          setCountryOverviews(parsedData.countryOverviews)
        } else if (parsedData.countryOverview && parsedData.selectedCountry) {
          // Backward compatibility
          setCountryOverviews({
            [parsedData.selectedCountry]: parsedData.countryOverview
          })
        }
      }
    }
  }, [])

  // Initialize empty overview for selected country if it doesn't exist
  useEffect(() => {
    if (selectedCountry && !countryOverviews[selectedCountry]) {
      setCountryOverviews(prev => ({
        ...prev,
        [selectedCountry]: {
          economicIndicators: "",
          countryPerception: "",
          tradeSectors: "",
          tradeWithUSA: ""
        }
      }))
    }
  }, [selectedCountry, countryOverviews])

  const generateWithAI = (section?: string) => {
    setIsGenerating(true)

    // Simulate AI generation with a timeout
    setTimeout(() => {
      if (!section) {
        setCountryOverviews(prev => ({
          ...prev,
          [selectedCountry]: {
            economicIndicators: "GDP: $X trillion\nInflation: X%\nUnemployment: X%\nCurrency: XXX",
            countryPerception: "Country perception analysis generated by AI...",
            tradeSectors: "Major sectors include technology, agriculture, and manufacturing...",
            tradeWithUSA: "Trade volume: $X billion\nMajor exports: X, Y, Z\nMajor imports: A, B, C",
          }
        }))
      } else if (section === "economicIndicators") {
        setCountryOverviews(prev => ({
          ...prev,
          [selectedCountry]: {
            ...prev[selectedCountry],
            economicIndicators: "GDP: $X trillion\nInflation: X%\nUnemployment: X%\nCurrency: XXX",
          }
        }))
      } else if (section === "countryPerception") {
        setCountryOverviews(prev => ({
          ...prev,
          [selectedCountry]: {
            ...prev[selectedCountry],
            countryPerception: "Country perception analysis generated by AI...",
          }
        }))
      } else if (section === "tradeSectors") {
        setCountryOverviews(prev => ({
          ...prev,
          [selectedCountry]: {
            ...prev[selectedCountry],
            tradeSectors: "Major sectors include technology, agriculture, and manufacturing...",
          }
        }))
      } else if (section === "tradeWithUSA") {
        setCountryOverviews(prev => ({
          ...prev,
          [selectedCountry]: {
            ...prev[selectedCountry],
            tradeWithUSA: "Trade volume: $X billion\nMajor exports: X, Y, Z\nMajor imports: A, B, C",
          }
        }))
      }
      setIsGenerating(false)
    }, 2000)
  }

  const handleNext = () => {
    // Save current data
    const reportData = JSON.parse(localStorage.getItem("reportData") || "{}")
    
    // Determine next step based on report type
    const nextStep = reportType === "meeting" ? "news-events" : "summary"
    
    const updatedData = {
      ...reportData,
      countryOverview: countryOverviews[selectedCountry], // Keep for backward compatibility
      countryOverviews,
      step: nextStep,
    }
    localStorage.setItem("reportData", JSON.stringify(updatedData))

    // Navigate to next step based on report type
    if (reportType === "meeting") {
      router.push("/dashboard/reports/create/news-events")
    } else {
      router.push("/dashboard/reports/create/summary")
    }
  }

  const handlePrevious = () => {
    // Save current data
    const reportData = JSON.parse(localStorage.getItem("reportData") || "{}")
    
    // Determine previous step based on report type
    const prevStep = reportType === "meeting" ? "profiles" : "report-info"
    
    const updatedData = {
      ...reportData,
      countryOverview: countryOverviews[selectedCountry], // Keep for backward compatibility
      countryOverviews,
      step: prevStep,
    }
    localStorage.setItem("reportData", JSON.stringify(updatedData))

    // Navigate to previous step based on report type
    if (reportType === "meeting") {
      router.push("/dashboard/reports/create/profiles")
    } else {
      router.push("/dashboard/reports/create/report-info")
    }
  }

  const getCountryName = (code: string) => {
    const country = mockCountries.find((c) => c.code === code)
    return country ? country.name : code
  }

  // Get current country overview
  const currentOverview = selectedCountry && countryOverviews[selectedCountry] 
    ? countryOverviews[selectedCountry] 
    : { economicIndicators: "", countryPerception: "", tradeSectors: "", tradeWithUSA: "" }

  return (
    <div className="space-y-6">
      <ReportProgressIndicator currentStep="country-overview" reportType={reportType} />

      {reportType === "informative" && availableCountries.length > 1 && (
        <div className="mb-6">
          <Label htmlFor="country-selector">Select Country to Edit</Label>
          <Select value={selectedCountry} onValueChange={setSelectedCountry}>
            <SelectTrigger id="country-selector" className="mt-1">
              <SelectValue placeholder="Select a country">
                {selectedCountry && (
                  <div className="flex items-center">
                    <img
                      src={`https://flagcdn.com/${selectedCountry.toLowerCase()}.svg`}
                      alt={`${getCountryName(selectedCountry)} flag`}
                      className="h-4 w-6 mr-2 rounded-sm object-cover"
                    />
                    <span>{getCountryName(selectedCountry)}</span>
                  </div>
                )}
              </SelectValue>
            </SelectTrigger>
            <SelectContent>
              {availableCountries.map((countryCode) => (
                <SelectItem key={countryCode} value={countryCode}>
                  <div className="flex items-center">
                    <img
                      src={`https://flagcdn.com/${countryCode.toLowerCase()}.svg`}
                      alt={`${getCountryName(countryCode)} flag`}
                      className="h-4 w-6 mr-2 rounded-sm object-cover"
                    />
                    <span>{getCountryName(countryCode)}</span>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      )}

      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">
          Country Overview: {selectedCountry ? getCountryName(selectedCountry) : ""}
        </h2>
        <Button onClick={() => generateWithAI()} disabled={isGenerating || !selectedCountry}>
          {isGenerating ? "Generating..." : "Generate All with AI"}
        </Button>
      </div>

      {!selectedCountry ? (
        <Card>
          <CardContent className="pt-6 text-center text-gray-500">
            <p>Please select a country first in the Report Info tab.</p>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card>
            <CardContent className="pt-6 space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="economic-indicators">Key Economic Indicators</Label>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => generateWithAI("economicIndicators")}
                  disabled={isGenerating}
                >
                  <Sparkles className="mr-2 h-4 w-4" />
                  Generate
                </Button>
              </div>
              <Textarea
                id="economic-indicators"
                value={currentOverview.economicIndicators}
                onChange={(e) =>
                  setCountryOverviews({
                    ...countryOverviews,
                    [selectedCountry]: {
                      ...currentOverview,
                      economicIndicators: e.target.value,
                    },
                  })
                }
                placeholder="Economic indicators will be generated by AI"
                rows={5}
              />
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-6 space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="country-perception">Country Perception</Label>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => generateWithAI("countryPerception")}
                  disabled={isGenerating}
                >
                  <Sparkles className="mr-2 h-4 w-4" />
                  Generate
                </Button>
              </div>
              <Textarea
                id="country-perception"
                value={currentOverview.countryPerception}
                onChange={(e) =>
                  setCountryOverviews({
                    ...countryOverviews,
                    [selectedCountry]: {
                      ...currentOverview,
                      countryPerception: e.target.value,
                    },
                  })
                }
                placeholder="Country perception will be generated by AI"
                rows={5}
              />
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-6 space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="trade-sectors">Key Trade Sectors</Label>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => generateWithAI("tradeSectors")}
                  disabled={isGenerating}
                >
                  <Sparkles className="mr-2 h-4 w-4" />
                  Generate
                </Button>
              </div>
              <Textarea
                id="trade-sectors"
                value={currentOverview.tradeSectors}
                onChange={(e) =>
                  setCountryOverviews({
                    ...countryOverviews,
                    [selectedCountry]: {
                      ...currentOverview,
                      tradeSectors: e.target.value,
                    },
                  })
                }
                placeholder="Trade sectors will be generated by AI"
                rows={5}
              />
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-6 space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="trade-with-usa">Trade with USA</Label>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => generateWithAI("tradeWithUSA")}
                  disabled={isGenerating}
                >
                  <Sparkles className="mr-2 h-4 w-4" />
                  Generate
                </Button>
              </div>
              <Textarea
                id="trade-with-usa"
                value={currentOverview.tradeWithUSA}
                onChange={(e) =>
                  setCountryOverviews({
                    ...countryOverviews,
                    [selectedCountry]: {
                      ...currentOverview,
                      tradeWithUSA: e.target.value,
                    },
                  })
                }
                placeholder="Trade with USA will be generated by AI"
                rows={5}
              />
            </CardContent>
          </Card>
        </div>
      )}

      <div className="flex justify-between space-x-4">
        <Button variant="outline" onClick={handlePrevious}>
          <ArrowLeft className="mr-2 h-4 w-4" /> Previous
        </Button>
        <Button onClick={handleNext}>
          Next <ArrowRight className="ml-2 h-4 w-4" />
        </Button>
      </div>
    </div>
  )
}

