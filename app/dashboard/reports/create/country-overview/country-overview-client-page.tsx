"use client"
import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { ArrowRight, ArrowLeft, Sparkles } from "lucide-react"
import ReportProgressIndicator from "@/components/reports/report-progress-indicator"
import { mockCountries } from "@/lib/mock-data"

export default function CountryOverviewClientPage() {
  const router = useRouter()
  const [selectedCountry, setSelectedCountry] = useState("")
  const [countryOverview, setCountryOverview] = useState({
    economicIndicators: "",
    countryPerception: "",
    tradeSectors: "",
    tradeWithUSA: "",
  })
  const [isGenerating, setIsGenerating] = useState(false)

  // Load existing data if available
  useEffect(() => {
    const reportData = localStorage.getItem("reportData")
    if (reportData) {
      const parsedData = JSON.parse(reportData)
      setSelectedCountry(parsedData.selectedCountry || "")
      if (parsedData.countryOverview) {
        setCountryOverview(parsedData.countryOverview)
      }
    }
  }, [])

  const generateWithAI = (section?: string) => {
    setIsGenerating(true)

    // Simulate AI generation with a timeout
    setTimeout(() => {
      if (!section) {
        setCountryOverview({
          economicIndicators: "GDP: $X trillion\nInflation: X%\nUnemployment: X%\nCurrency: XXX",
          countryPerception: "Country perception analysis generated by AI...",
          tradeSectors: "Major sectors include technology, agriculture, and manufacturing...",
          tradeWithUSA: "Trade volume: $X billion\nMajor exports: X, Y, Z\nMajor imports: A, B, C",
        })
      } else if (section === "economicIndicators") {
        setCountryOverview({
          ...countryOverview,
          economicIndicators: "GDP: $X trillion\nInflation: X%\nUnemployment: X%\nCurrency: XXX",
        })
      } else if (section === "countryPerception") {
        setCountryOverview({
          ...countryOverview,
          countryPerception: "Country perception analysis generated by AI...",
        })
      } else if (section === "tradeSectors") {
        setCountryOverview({
          ...countryOverview,
          tradeSectors: "Major sectors include technology, agriculture, and manufacturing...",
        })
      } else if (section === "tradeWithUSA") {
        setCountryOverview({
          ...countryOverview,
          tradeWithUSA: "Trade volume: $X billion\nMajor exports: X, Y, Z\nMajor imports: A, B, C",
        })
      }
      setIsGenerating(false)
    }, 2000)
  }

  const handleNext = () => {
    // Save current data
    const reportData = JSON.parse(localStorage.getItem("reportData") || "{}")
    const updatedData = {
      ...reportData,
      countryOverview,
      step: "news-events",
    }
    localStorage.setItem("reportData", JSON.stringify(updatedData))

    // Navigate to next step
    router.push("/dashboard/reports/create/news-events")
  }

  const handlePrevious = () => {
    // Save current data
    const reportData = JSON.parse(localStorage.getItem("reportData") || "{}")
    const updatedData = {
      ...reportData,
      countryOverview,
      step: "profiles",
    }
    localStorage.setItem("reportData", JSON.stringify(updatedData))

    // Navigate to previous step
    router.push("/dashboard/reports/create/profiles")
  }

  const getCountryName = (code: string) => {
    const country = mockCountries.find((c) => c.code === code)
    return country ? country.name : code
  }

  return (
    <div className="space-y-6">
      <ReportProgressIndicator currentStep="country-overview" />

      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">
          Country Overview: {selectedCountry ? getCountryName(selectedCountry) : ""}
        </h2>
        <Button onClick={() => generateWithAI()} disabled={isGenerating || !selectedCountry}>
          {isGenerating ? "Generating..." : "Generate All with AI"}
        </Button>
      </div>

      {!selectedCountry ? (
        <Card>
          <CardContent className="pt-6 text-center text-gray-500">
            <p>Please select a country first in the Report Info tab.</p>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card>
            <CardContent className="pt-6 space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="economic-indicators">Key Economic Indicators</Label>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => generateWithAI("economicIndicators")}
                  disabled={isGenerating}
                >
                  <Sparkles className="mr-2 h-4 w-4" />
                  Generate
                </Button>
              </div>
              <Textarea
                id="economic-indicators"
                value={countryOverview.economicIndicators}
                onChange={(e) =>
                  setCountryOverview({
                    ...countryOverview,
                    economicIndicators: e.target.value,
                  })
                }
                placeholder="Economic indicators will be generated by AI"
                rows={5}
              />
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-6 space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="country-perception">Country Perception</Label>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => generateWithAI("countryPerception")}
                  disabled={isGenerating}
                >
                  <Sparkles className="mr-2 h-4 w-4" />
                  Generate
                </Button>
              </div>
              <Textarea
                id="country-perception"
                value={countryOverview.countryPerception}
                onChange={(e) =>
                  setCountryOverview({
                    ...countryOverview,
                    countryPerception: e.target.value,
                  })
                }
                placeholder="Country perception will be generated by AI"
                rows={5}
              />
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-6 space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="trade-sectors">Key Trade Sectors</Label>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => generateWithAI("tradeSectors")}
                  disabled={isGenerating}
                >
                  <Sparkles className="mr-2 h-4 w-4" />
                  Generate
                </Button>
              </div>
              <Textarea
                id="trade-sectors"
                value={countryOverview.tradeSectors}
                onChange={(e) =>
                  setCountryOverview({
                    ...countryOverview,
                    tradeSectors: e.target.value,
                  })
                }
                placeholder="Trade sectors will be generated by AI"
                rows={5}
              />
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-6 space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="trade-with-usa">Trade with USA</Label>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => generateWithAI("tradeWithUSA")}
                  disabled={isGenerating}
                >
                  <Sparkles className="mr-2 h-4 w-4" />
                  Generate
                </Button>
              </div>
              <Textarea
                id="trade-with-usa"
                value={countryOverview.tradeWithUSA}
                onChange={(e) =>
                  setCountryOverview({
                    ...countryOverview,
                    tradeWithUSA: e.target.value,
                  })
                }
                placeholder="Trade with USA will be generated by AI"
                rows={5}
              />
            </CardContent>
          </Card>
        </div>
      )}

      <div className="flex justify-between space-x-4">
        <Button variant="outline" onClick={handlePrevious}>
          <ArrowLeft className="mr-2 h-4 w-4" /> Previous
        </Button>
        <Button onClick={handleNext}>
          Next <ArrowRight className="ml-2 h-4 w-4" />
        </Button>
      </div>
    </div>
  )
}

